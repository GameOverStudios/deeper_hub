defmodule Deeper_Hub.Core.Data.DBConnection.DBConnectionBehaviour do
  @moduledoc """
  Comportamento que define a interface para opera√ß√µes de conex√£o com banco de dados.
  
  Este m√≥dulo define o contrato para adapters de conex√£o com banco de dados,
  permitindo opera√ß√µes como transa√ß√µes, prepara√ß√£o e execu√ß√£o de consultas,
  e gerenciamento do ciclo de vida das conex√µes.
  
  ## Funcionalidades
  
  * üîÑ Gerenciamento de conex√µes com banco de dados
  * üìù Prepara√ß√£o e execu√ß√£o de consultas
  * üîí Suporte a transa√ß√µes
  * üìä M√©tricas de conex√£o
  * üõ°Ô∏è Tratamento de erros de conex√£o
  """
  
  @doc """
  Inicia uma conex√£o com o banco de dados.
  
  ## Par√¢metros
  
    * `conn_mod` - M√≥dulo de conex√£o
    * `opts` - Op√ß√µes de conex√£o
    
  ## Retorno
  
    * `{:ok, pid}` - Conex√£o iniciada com sucesso
    * `{:error, term()}` - Erro ao iniciar a conex√£o
  """
  @callback start_link(conn_mod :: module(), opts :: Keyword.t()) ::
              {:ok, pid()} | {:error, term()}
  
  @doc """
  Prepara uma consulta para execu√ß√£o.
  
  ## Par√¢metros
  
    * `conn` - Conex√£o com o banco de dados
    * `query` - Consulta a ser preparada
    * `opts` - Op√ß√µes de prepara√ß√£o
    
  ## Retorno
  
    * `{:ok, prepared_query}` - Consulta preparada com sucesso
    * `{:error, exception}` - Erro ao preparar a consulta
  """
  @callback prepare(conn :: DBConnection.conn(), query :: term(), opts :: Keyword.t()) ::
              {:ok, prepared_query :: term()} | {:error, Exception.t()}
  
  @doc """
  Executa uma consulta preparada.
  
  ## Par√¢metros
  
    * `conn` - Conex√£o com o banco de dados
    * `query` - Consulta preparada
    * `params` - Par√¢metros da consulta
    * `opts` - Op√ß√µes de execu√ß√£o
    
  ## Retorno
  
    * `{:ok, result}` - Consulta executada com sucesso
    * `{:error, exception}` - Erro ao executar a consulta
  """
  @callback execute(
              conn :: DBConnection.conn(),
              query :: term(),
              params :: term(),
              opts :: Keyword.t()
            ) :: {:ok, result :: term()} | {:error, Exception.t()}
  
  @doc """
  Prepara e executa uma consulta em uma √∫nica opera√ß√£o.
  
  ## Par√¢metros
  
    * `conn` - Conex√£o com o banco de dados
    * `query` - Consulta a ser preparada e executada
    * `params` - Par√¢metros da consulta
    * `opts` - Op√ß√µes de prepara√ß√£o e execu√ß√£o
    
  ## Retorno
  
    * `{:ok, prepared_query, result}` - Consulta preparada e executada com sucesso
    * `{:error, exception}` - Erro ao preparar ou executar a consulta
  """
  @callback prepare_execute(
              conn :: DBConnection.conn(),
              query :: term(),
              params :: term(),
              opts :: Keyword.t()
            ) ::
              {:ok, prepared_query :: term(), result :: term()} | {:error, Exception.t()}
  
  @doc """
  Executa uma fun√ß√£o dentro de uma transa√ß√£o.
  
  ## Par√¢metros
  
    * `conn` - Conex√£o com o banco de dados
    * `fun` - Fun√ß√£o a ser executada dentro da transa√ß√£o
    * `opts` - Op√ß√µes da transa√ß√£o
    
  ## Retorno
  
    * `{:ok, result}` - Transa√ß√£o conclu√≠da com sucesso
    * `{:error, reason}` - Erro na transa√ß√£o
  """
  @callback transaction(
              conn :: DBConnection.conn(),
              fun :: (DBConnection.conn() -> any()),
              opts :: Keyword.t()
            ) :: {:ok, any()} | {:error, term()}
  
  @doc """
  Desfaz uma transa√ß√£o.
  
  ## Par√¢metros
  
    * `conn` - Conex√£o com o banco de dados
    * `reason` - Motivo do rollback
    
  ## Retorno
  
    * `:ok` - Rollback realizado com sucesso
    * `{:error, term()}` - Erro ao realizar o rollback
  """
  @callback rollback(conn :: DBConnection.conn(), reason :: term()) :: no_return()
  
  @doc """
  Executa uma fun√ß√£o com uma conex√£o.
  
  ## Par√¢metros
  
    * `conn` - Conex√£o com o banco de dados
    * `fun` - Fun√ß√£o a ser executada
    * `opts` - Op√ß√µes de execu√ß√£o
    
  ## Retorno
  
    * `result` - Resultado da fun√ß√£o
  """
  @callback run(
              conn :: DBConnection.conn(),
              fun :: (DBConnection.conn() -> any()),
              opts :: Keyword.t()
            ) :: any()
  
  @doc """
  Obt√©m o status da conex√£o.
  
  ## Par√¢metros
  
    * `conn` - Conex√£o com o banco de dados
    * `opts` - Op√ß√µes
    
  ## Retorno
  
    * `:idle` | `:busy` | `:closed` - Status da conex√£o
  """
  @callback status(conn :: DBConnection.conn(), opts :: Keyword.t()) ::
              :idle | :busy | :closed
  
  @doc """
  Fecha uma consulta preparada.
  
  ## Par√¢metros
  
    * `conn` - Conex√£o com o banco de dados
    * `query` - Consulta preparada
    * `opts` - Op√ß√µes
    
  ## Retorno
  
    * `:ok` - Consulta fechada com sucesso
    * `{:error, exception}` - Erro ao fechar a consulta
  """
  @callback close(conn :: DBConnection.conn(), query :: term(), opts :: Keyword.t()) ::
              :ok | {:error, Exception.t()}
  
  @doc """
  Obt√©m m√©tricas de conex√£o.
  
  ## Par√¢metros
  
    * `conn` - Conex√£o com o banco de dados
    * `opts` - Op√ß√µes
    
  ## Retorno
  
    * `map()` - M√©tricas da conex√£o
  """
  @callback get_connection_metrics(conn :: DBConnection.conn(), opts :: Keyword.t()) :: map()
end

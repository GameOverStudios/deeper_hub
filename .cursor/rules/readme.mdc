---
description: 
globs: .ex,.exs
alwaysApply: false
---
# Diretrizes de Codifica√ß√£o para o Projeto DeeperHub üöÄ

## Introdu√ß√£o

Este documento estabelece as diretrizes e pr√°ticas recomendadas para o desenvolvimento do projeto DeeperHub. Seu objetivo √© minimizar erros de desenvolvimento, garantir consist√™ncia no c√≥digo e assegurar que todas as implementa√ß√µes sigam fielmente as especifica√ß√µes descritas nos arquivos README de cada m√≥dulo.

## üîç Conformidade com Especifica√ß√µes

### Antes de Iniciar o Desenvolvimento

1. **Leia completamente o README do m√≥dulo**: Antes de iniciar qualquer implementa√ß√£o, leia integralmente o README do m√≥dulo para compreender:
   - Responsabilidades e funcionalidades esperadas
   - Estrutura de diret√≥rios recomendada
   - Depend√™ncias e integra√ß√µes com outros m√≥dulos
   - Padr√µes de design a serem seguidos

2. **N√£o crie m√≥dulos n√£o especificados**: 
   - ‚ö†Ô∏è **IMPORTANTE**: N√£o crie novos m√≥dulos que n√£o estejam previamente especificados nos documentos de requisitos ou READMEs.
   - Se identificar a necessidade de um novo m√≥dulo, documente a proposta e discuta com a equipe antes da implementa√ß√£o.

3. **Respeite a arquitetura definida**:
   - Mantenha a separa√ß√£o de responsabilidades conforme definido na arquitetura
   - N√£o adicione depend√™ncias desnecess√°rias entre m√≥dulos
   - Siga os padr√µes de design especificados (ex: Facade, Repository, Service)

### Durante o Desenvolvimento

1. **Implemente todas as funcionalidades especificadas**:
   - Verifique cada item listado nas se√ß√µes "Responsabilidades" e "Funcionalidades Chave"
   - Garanta que todos os casos de uso descritos sejam implementados

2. **Mantenha a consist√™ncia com a documenta√ß√£o**:
   - Use os mesmos nomes de fun√ß√µes, par√¢metros e tipos mencionados na documenta√ß√£o
   - Implemente as interfaces p√∫blicas conforme especificado
   - Documente quaisquer desvios necess√°rios das especifica√ß√µes originais

3. **Siga as conven√ß√µes de nomenclatura**:
   - Use nomes descritivos e significativos
   - Siga o padr√£o de nomenclatura do Elixir (snake_case para vari√°veis e fun√ß√µes)
   - Mantenha consist√™ncia com os nomes j√° utilizados no projeto

## üßπ Revis√£o de C√≥digo e Limpeza

### ‚ö†Ô∏è EXTREMAMENTE IMPORTANTE: Revis√£o P√≥s-Implementa√ß√£o

**Ap√≥s concluir a implementa√ß√£o de cada arquivo, realize uma revis√£o rigorosa para:**

1. **Remover c√≥digo n√£o utilizado**:
   - Vari√°veis declaradas mas n√£o utilizadas
   - Fun√ß√µes definidas mas nunca chamadas
   - Importa√ß√µes e aliases n√£o utilizados
   - Par√¢metros de fun√ß√µes que n√£o s√£o utilizados no corpo da fun√ß√£o

2. **Verificar implementa√ß√µes incompletas**:
   - Fun√ß√µes declaradas mas n√£o implementadas
   - Chamadas a fun√ß√µes que n√£o existem
   - TODOs ou FIXMEs deixados no c√≥digo
   - Implementa√ß√µes parciais de interfaces ou comportamentos

3. **Corrigir problemas de tipagem**:
   - Especifica√ß√µes de tipo (@spec) incorretas ou incompletas
   - Retornos de fun√ß√£o incompat√≠veis com a especifica√ß√£o
   - Par√¢metros com tipos incorretos

4. **Eliminar avisos de compila√ß√£o**:
   - Resolver todos os warnings do compilador
   - Corrigir problemas de deprecia√ß√£o
   - Eliminar avisos de dialyzer

### Checklist de Revis√£o

Utilize esta checklist ap√≥s cada implementa√ß√£o ou corre√ß√£o:

- [ ] Todas as vari√°veis declaradas s√£o utilizadas
- [ ] Todos os imports e aliases s√£o necess√°rios
- [ ] Todos os par√¢metros de fun√ß√µes s√£o utilizados
- [ ] Todas as fun√ß√µes declaradas est√£o implementadas
- [ ] N√£o existem chamadas a fun√ß√µes inexistentes
- [ ] Todas as especifica√ß√µes de tipo est√£o corretas
- [ ] N√£o h√° avisos de compila√ß√£o
- [ ] O c√≥digo est√° formatado de acordo com o estilo do projeto
- [ ] Os testes cobrem todas as funcionalidades implementadas
- [ ] A documenta√ß√£o est√° atualizada e reflete a implementa√ß√£o atual

## üß™ Testes

1. **Teste todas as funcionalidades implementadas**:
   - Crie testes unit√°rios para cada fun√ß√£o p√∫blica
   - Implemente testes de integra√ß√£o para fluxos completos
   - Verifique casos de borda e condi√ß√µes de erro

2. **Mantenha a cobertura de testes alta**:
   - Busque uma cobertura de c√≥digo de pelo menos 80%
   - Priorize testar l√≥gica complexa e tratamento de erros
   - N√£o deixe fun√ß√µes p√∫blicas sem testes

3. **Testes devem ser independentes e determin√≠sticos**:
   - Cada teste deve poder ser executado isoladamente
   - Evite depend√™ncias entre testes
   - Use mocks e stubs para isolar o c√≥digo sendo testado

## üìù Documenta√ß√£o

1. **Mantenha a documenta√ß√£o atualizada**:
   - Atualize a documenta√ß√£o quando alterar interfaces p√∫blicas
   - Adicione exemplos de uso para novas funcionalidades
   - Documente comportamentos n√£o √≥bvios ou complexos

2. **Documente todas as fun√ß√µes p√∫blicas**:
   - Use @moduledoc para documentar m√≥dulos
   - Use @doc para documentar fun√ß√µes p√∫blicas
   - Inclua exemplos de uso quando apropriado
   - Documente par√¢metros e valores de retorno

## üîÑ Processo de Desenvolvimento

1. **Desenvolvimento Iterativo**:
   - Implemente uma funcionalidade por vez
   - Teste cada funcionalidade antes de passar para a pr√≥xima
   - Refatore conforme necess√°rio para manter a qualidade do c√≥digo

2. **Revis√£o Regular**:
   - Revise o c√≥digo ap√≥s cada implementa√ß√£o significativa
   - Use ferramentas autom√°ticas de an√°lise de c√≥digo
   - Solicite revis√µes de c√≥digo de outros desenvolvedores quando poss√≠vel

3. **Integra√ß√£o Cont√≠nua**:
   - Execute os testes automatizados frequentemente
   - Verifique a cobertura de c√≥digo regularmente
   - Corrija falhas de teste imediatamente

## üõ†Ô∏è Ferramentas Recomendadas

1. **An√°lise Est√°tica**:
   - Credo: Para verificar estilo e boas pr√°ticas de c√≥digo Elixir
   - Dialyxir: Para an√°lise de tipos
   - ExDoc: Para gera√ß√£o de documenta√ß√£o

2. **Formata√ß√£o de C√≥digo**:
   - mix format: Para manter o c√≥digo formatado consistentemente

3. **Testes**:
   - ExUnit: Framework de testes padr√£o do Elixir
   - ExCoveralls: Para an√°lise de cobertura de c√≥digo

## Conclus√£o

Seguir estas diretrizes rigorosamente ajudar√° a manter a qualidade do c√≥digo, minimizar erros e garantir que o projeto DeeperHub seja desenvolvido de acordo com as especifica√ß√µes. A revis√£o p√≥s-implementa√ß√£o √© **EXTREMAMENTE IMPORTANTE** e deve ser realizada ap√≥s cada desenvolvimento ou corre√ß√£o para evitar a acumula√ß√£o de problemas t√©cnicos e garantir um c√≥digo limpo e funcional.

Lembre-se: Um c√≥digo limpo e bem estruturado √© mais f√°cil de manter, estender e depurar. Invista tempo na qualidade agora para economizar tempo no futuro.

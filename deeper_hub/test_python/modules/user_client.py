#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from modules.auth_client import AuthClient

class UserClient(AuthClient):
    """
    Implementa as funcionalidades de gerenciamento de usu√°rios para o cliente DeeperHub.
    """
    
    async def create_user(self, username, email, password):
        """Cria um novo usu√°rio no sistema."""
        payload = {
            "action": "create",  # A√ß√£o correta conforme implementado no servidor
            "username": username,
            "email": email,
            "password": password
        }
        
        response = await self.send_message("user", payload)
        
        if response.get("type") == "user.create.success":
            print(f"‚úÖ Usu√°rio {username} criado com sucesso")
            print(f"üÜî ID: {response['payload'].get('id', 'N/A')}")
            return True
        else:
            error_msg = "Erro desconhecido"
            if isinstance(response, dict) and 'message' in response:
                error_msg = response['message']
            elif isinstance(response, dict) and 'payload' in response and 'message' in response['payload']:
                error_msg = response['payload']['message']
            print(f"‚ùå Falha ao criar usu√°rio: {error_msg}")
            return False
    
    async def list_users(self):
        """Lista todos os usu√°rios do sistema."""
        payload = {
            "action": "list"  # A√ß√£o correta conforme implementado no servidor
        }
        
        response = await self.send_message("user", payload)
        
        if response.get("type") == "user.list.success":
            users = response["payload"].get("users", [])
            print(f"‚úÖ {len(users)} usu√°rios encontrados:")
            
            for i, user in enumerate(users, 1):
                print(f"{i}. {user.get('username')} (ID: {user.get('id')}, Email: {user.get('email')})")
                
            return users
        else:
            error_msg = "Erro desconhecido"
            if isinstance(response, dict) and 'message' in response:
                error_msg = response['message']
            elif isinstance(response, dict) and 'payload' in response and 'message' in response['payload']:
                error_msg = response['payload']['message']
            print(f"‚ùå Falha ao listar usu√°rios: {error_msg}")
            return []
    
    async def update_user(self, user_id, data):
        """Atualiza dados de um usu√°rio."""
        # Adiciona o user_id diretamente ao payload, n√£o em um objeto data
        payload = {
            "action": "update",  # A√ß√£o correta conforme implementado no servidor
            "user_id": user_id
        }
        
        # Adiciona os campos a serem atualizados diretamente no payload
        for key, value in data.items():
            payload[key] = value
        
        response = await self.send_message("user", payload)
        
        if response.get("type") == "user.update.success":
            print(f"‚úÖ Usu√°rio {user_id} atualizado com sucesso")
            return True
        else:
            error_msg = "Erro desconhecido"
            if isinstance(response, dict) and 'message' in response:
                error_msg = response['message']
            elif isinstance(response, dict) and 'payload' in response and 'message' in response['payload']:
                error_msg = response['payload']['message']
            print(f"‚ùå Falha ao atualizar usu√°rio: {error_msg}")
            return False
    
    async def delete_user(self, user_id):
        """Remove um usu√°rio do sistema."""
        payload = {
            "action": "delete",  # A√ß√£o correta conforme implementado no servidor
            "user_id": user_id
        }
        
        response = await self.send_message("user", payload)
        
        if response.get("type") == "user.delete.success":
            print(f"‚úÖ Usu√°rio {user_id} exclu√≠do com sucesso")
            return True
        else:
            error_msg = "Erro desconhecido"
            if isinstance(response, dict) and 'message' in response:
                error_msg = response['message']
            elif isinstance(response, dict) and 'payload' in response and 'message' in response['payload']:
                error_msg = response['payload']['message']
            print(f"‚ùå Falha ao excluir usu√°rio: {error_msg}")
            return False
            
    async def get_user(self, user_id):
        """Obt√©m detalhes de um usu√°rio espec√≠fico."""
        payload = {
            "action": "get",  # A√ß√£o correta conforme implementado no servidor
            "user_id": user_id
        }
        
        response = await self.send_message("user", payload)
        
        if response.get("type") == "user.get.success":
            user = response["payload"]
            print(f"‚úÖ Usu√°rio encontrado:")
            print(f"ID: {user.get('id')}")
            print(f"Nome: {user.get('username')}")
            print(f"Email: {user.get('email')}")
            print(f"Ativo: {'Sim' if user.get('is_active') else 'N√£o'}")
            return user
        else:
            error_msg = "Erro desconhecido"
            if isinstance(response, dict) and 'message' in response:
                error_msg = response['message']
            elif isinstance(response, dict) and 'payload' in response and 'message' in response['payload']:
                error_msg = response['payload']['message']
            print(f"‚ùå Falha ao obter usu√°rio: {error_msg}")
            return None
            
    async def change_password(self, username, new_password):
        """Altera a senha de um usu√°rio."""
        payload = {
            "action": "change_password",  # A√ß√£o conforme implementado no servidor
            "username": username,
            "password": new_password
        }
        
        response = await self.send_message("user", payload)
        
        if response.get("type") == "user.change_password.success":
            print(f"‚úÖ Senha alterada com sucesso para o usu√°rio {username}")
            return True
        else:
            error_msg = "Erro desconhecido"
            if isinstance(response, dict) and 'message' in response:
                error_msg = response['message']
            elif isinstance(response, dict) and 'payload' in response and 'message' in response['payload']:
                error_msg = response['payload']['message']
            print(f"‚ùå Falha ao alterar senha: {error_msg}")
            return False

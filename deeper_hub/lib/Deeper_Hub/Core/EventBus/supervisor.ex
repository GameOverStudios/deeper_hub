defmodule Deeper_Hub.Core.EventBus.Supervisor do
  @moduledoc """
  Supervisor para o sistema de barramento de eventos do Deeper_Hub.

  Este m√≥dulo √© respons√°vel por iniciar e supervisionar os processos
  relacionados ao sistema de barramento de eventos, garantindo que os t√≥picos
  padr√£o sejam registrados e que o sistema esteja sempre dispon√≠vel.

  ## Responsabilidades

  * üöÄ Inicializar o sistema de barramento de eventos
  * üìä Registrar t√≥picos padr√£o para eventos importantes
  * üîÑ Garantir a disponibilidade do sistema de eventos
  * üõ°Ô∏è Supervisionar processos relacionados ao barramento de eventos
  """

  use Supervisor

  alias Deeper_Hub.Core.Logger
  alias Deeper_Hub.Core.EventBus.Topics

  @doc """
  Inicia o supervisor de barramento de eventos.

  ## Retorno

    * `{:ok, pid}` - Supervisor iniciado com sucesso
    * `{:error, reason}` - Falha ao iniciar o supervisor
  """
  @spec start_link(term()) :: Supervisor.on_start()
  def start_link(init_arg) do
    Supervisor.start_link(__MODULE__, init_arg, name: __MODULE__)
  end

  @doc """
  Inicializa o supervisor e registra os t√≥picos padr√£o.

  ## Par√¢metros

    * `init_arg` - Argumentos de inicializa√ß√£o (n√£o utilizados)

  ## Retorno

    * `{:ok, {supervisor_flags, child_specs}}` - Configura√ß√£o do supervisor
  """
  @impl Supervisor
  def init(_init_arg) do
    Logger.info("Inicializando supervisor de barramento de eventos", %{module: __MODULE__})

    # Registra os t√≥picos padr√£o para eventos importantes
    register_default_topics()

    # Define os processos filhos a serem supervisionados
    children = [
      # Por enquanto, n√£o h√° processos filhos espec√≠ficos para o barramento de eventos
      # No futuro, poderiam ser adicionados processos como workers de processamento de eventos
    ]

    # Inicia o supervisor com a estrat√©gia one_for_one
    Supervisor.init(children, strategy: :one_for_one)
  end

  @doc """
  Registra os t√≥picos padr√£o para eventos importantes do sistema.

  Esta fun√ß√£o √© chamada durante a inicializa√ß√£o do supervisor e
  registra os t√≥picos definidos no m√≥dulo Topics.

  ## Retorno

    * `:ok` - T√≥picos registrados com sucesso
  """
  @spec register_default_topics() :: :ok
  def register_default_topics do
    Logger.debug("Registrando t√≥picos padr√£o de barramento de eventos", %{module: __MODULE__})

    # Registra todos os t√≥picos padr√£o
    :ok = Topics.register_all_topics()

    Logger.info("T√≥picos padr√£o de barramento de eventos registrados com sucesso", %{module: __MODULE__})

    :ok
  end
end
